this post originally appeared on bitpost with permission from its author joshua hensleei finally dove into scrypt in april  largely due to my obsession with the nlocktime feature on the bitcoin protocoli had been procrastinating using scrypt because of the lowlevel and difficult to troubleshoot nature of bitcoin script but after two days down the rabbit hole mostly due to dealing with quirks like hex reversing endianess and bytes i managed to create a script where one can lock bitcoin or run tokens onchain until a certain timefor example i can provably lock up  bsv until block height  or lock  shua tokens up until january  the contract is deployed onchain heresource runexample of locking  firecoin token until friday april    utci was only able to spend this token after that timeyou do not necessarily need run to use this simply send bsv or tokens from another utxobased token protocol to the script in the above link replacing nlocktime with the block height or unix timestamp in the future and publickey with one that you controli chose classic satoshistyle  over the frequently used  for simplicityto be able to use scripts like these i needed to leverage the oppushtx technique developed by nchain and implemented by scrypt shruggr from kronoverse and i made pull requests to get a preimage function merged into the bsv  and bsv legacy libraries respectively so that others can more easily implement the oppushtx themselvesthis technique is necessary because it pushes the details of the current transaction as part of the solution so that the nlocktime of the current transaction can be validated against the value put onchain in the previous transactionwhat are the use casesa big concern of anyone dealing with digital currency is how to secure their coins many by principle are opposed to using custodial services to secure their bitcoin for good reason for those keeping their coins at some physical location burglary is always a riskupon attempted theft imagine being able to press a button or issue a voice command to time lock your stash for a couple of days—such that even you cannot access the coins despite controlling the private keyanother use case is to provably lock funds until a certain milestone date for example playwithhaste wanted to issue their hst tokens on a distribution schedule this script alone would not be sufficient for their requirements but the approach of publicly demonstrating the inability to access by the issuers is a startsource hst whitepaperthis type of socalled ‘smart contracting’ was possible on bitcoin since its launch in  but only available on bsv since february  the bitcoin core developers handicapped the scripting capability then hardforked the protocol adding a custom opcode that implements a hack called checklocktimeverifywhy could the ‘most talented development team in the world’ not figure out this was always possible on standard bitcoini strongly encourage developers to look into scrypt and learn how to build these types of scripts as i mentioned in previous articles the biggest impediment to development is believing that you cannot do it admittedly the experience was a rough two days but was truly worth it in the endthe tools are available for others to figure out how to lock and unlock these transactionsin case one wants to jump straight ahead to the answer i have paywalled my code to lock and unlock these scripts both using run tokens and bsv in javascript on bitpostcaution this is an experimental script with limited testing please use the bsv test net first andor small amounts before production usagenew to bitcoin check out coingeek’s bitcoin for beginners section the ultimate resource guide to learn more about bitcoin—as originally envisioned by satoshi nakamoto—and blockchain