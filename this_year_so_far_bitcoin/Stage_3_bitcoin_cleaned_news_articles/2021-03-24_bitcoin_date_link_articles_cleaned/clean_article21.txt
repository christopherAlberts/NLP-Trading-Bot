this week’s bitcoin optech newsletter covers signature delegation taproot’s effect on bitcoin’s resistance to quantum cryptography and morethe bitcoin optech newsletter provides readers with a toplevel summary of the most important technical news happening in bitcoin along with resources that help them learn more to help our readers stay uptodate with bitcoin were republishing the latest issue of this newsletter below remember to subscribe to receive this content straight to your inboxthis week’s newsletter describes a technique for signature delegation under bitcoin’s existing consensus rules summarizes a discussion about taproot’s effect on bitcoin’s resistance to quantum cryptography and announces a series of weekly meetings to help activate taproot also included are our regular sections describing notable changes to services and client software new releases and release candidates and notable changes to popular bitcoin infrastructure softwarenewssigning delegation under existing consensus rules imagine alice wants to give bob the ability to spend one of her utxos without immediately creating an onchain transaction or giving him her private key this is called delegation and it’s been discussed for years perhaps most notably in recent times as part of the graftroot proposal last week jeremy rubin posted to the bitcoindev mailing list a description of a technique to accomplish delegation using bitcoin todaylet’s say alice has utxoa and bob has utxob alice creates a partially signed transaction spending both utxoa and utxob alice signs for her utxo using the sighash flag sighashnone which prevents the signature from committing to any of the transaction’s outputs this gives the owner of the other input in the transaction—bob—unilateral control over the choice of outputs using his signature with the normal sighashall flag to commit to those outputs and prevent anyone else from modifying the transaction by using this dualinput sighashnone trick alice delegates to bob the ability to sign for her utxothis technique appears to be mainly of theoretical interest there are other proposed delegation techniques—including graftroot opchecktemplateverify and opchecksigfromstack—that would likely be superior in several ways but only this technique is currently usable on mainnet for anyone who wants to experiment with itlet’s say alice has utxoa and bob has utxob alice creates a partially signed transaction spending both utxoa and utxob alice signs for her utxo using the sighash flag sighashnone which prevents the signature from committing to any of the transaction’s outputs this gives the owner of the other input in the transaction—bob—unilateral control over the choice of outputs using his signature with the normal sighashall flag to commit to those outputs and prevent anyone else from modifying the transaction by using this dualinput sighashnone trick alice delegates to bob the ability to sign for her utxo this technique appears to be mainly of theoretical interest there are other proposed delegation techniques—including graftroot opchecktemplateverify and opchecksigfromstack—that would likely be superior in several ways but only this technique is currently usable on mainnet for anyone who wants to experiment with it discussion of quantum computer attacks on taproot the original bitcoin software provided two ways to receive bitcoinpaytopublickey  implemented the simple and clear method described in the original bitcoin paper of receiving bitcoins to a public key and allowing those coins to be spent by a signature the bitcoin software used this by default when the public key material could be handled entirely by softwarepaytopublickeyhash  added a layer of indirection receiving bitcoins to a hash digest that committed to the public key to be used to spend the coins the public key would need to be published alongside the signature making the  bytes dedicated to the hash digest an overhead cost this was used by default when the payment information might need to be handled by a person eg an address that could be copied and pastednakamoto never described why he implemented both methods but it’s widely believed that he added the hash indirection in order to make bitcoin addresses smaller so that they could be communicated more easily public keys in the original bitcoin implementation were  bytes but address hashes were only  bytesin the decade since there have been a number of developments to make certain multisig protocols simple and secure by default it was determined that scripts for multiparty protocols should probably use a  commitment bitcoin developers also learned about previously known techniques that could compress a public key down to  bytes—later describing how to optimize that to  bytes finally taproot’s primary innovation showed that a  public key could commit to a script with security similar to that of a  hash all of this means that it no longer changes the amount of address data people have to communicate whether they use a hash or a public key—it’s  bytes either way if they want a universally applicable address format however directly using public keys still eliminates the extra bandwidth and storage resulting from hash indirection if every payment went to a public key instead of a  hash it would save about  gigabytes of block chain space per year the  specification of taproot describes space savings as the reason it accepts payments to public keys in the  style instead of hashes in the  stylebut  hash indirection does have one advantage it can hide keys from public view until they’re needed to authorize a spend this means an adversary who has the ability to compromise the security of a public key might not be able to start using that ability until a transaction is broadcast and they may lose the ability to steal funds controlled by that key once the transaction is confirmed to a certain depth this limits the amount of time available for their attack and means a slow attack might not work although this has previously been discussed at length in the context of taproot’s choice to directly use public keys in the  style see   and newsletters  and  it was the subject of renewed discussion this week on the bitcoindev mailing list after the publication of an email opposing taproot out of fear that we could see a quantum computer powerful enough to attack bitcoinstyle public keys “as soon as the end of the decade”none of the participants in the mailing list discussion said they also opposed taproot but they did examine the argument’s premises discuss alternatives and evaluate what tradeoffs would be implied by those alternatives a selection of those conversations are summarized belowin the decade since there have been a number of developments to make certain multisig protocols simple and secure by default it was determined that scripts for multiparty protocols should probably use a  commitment bitcoin developers also learned about previously known techniques that could compress a public key down to  bytes—later describing how to optimize that to  bytes finally taproot’s primary innovation showed that a  public key could commit to a script with security similar to that of a  hash all of this means that it no longer changes the amount of address data people have to communicate whether they use a hash or a public key—it’s  bytes either way if they want a universally applicable address format however directly using public keys still eliminates the extra bandwidth and storage resulting from hash indirection if every payment went to a public key instead of a  hash it would save about  gigabytes of block chain space per year the  specification of taproot describes space savings as the reason it accepts payments to public keys in the  style instead of hashes in the  style but  hash indirection does have one advantage it can hide keys from public view until they’re needed to authorize a spend this means an adversary who has the ability to compromise the security of a public key might not be able to start using that ability until a transaction is broadcast and they may lose the ability to steal funds controlled by that key once the transaction is confirmed to a certain depth this limits the amount of time available for their attack and means a slow attack might not work although this has previously been discussed at length in the context of taproot’s choice to directly use public keys in the  style see   and newsletters  and  it was the subject of renewed discussion this week on the bitcoindev mailing list after the publication of an email opposing taproot out of fear that we could see a quantum computer powerful enough to attack bitcoinstyle public keys “as soon as the end of the decade” none of the participants in the mailing list discussion said they also opposed taproot but they did examine the argument’s premises discuss alternatives and evaluate what tradeoffs would be implied by those alternatives a selection of those conversations are summarized below hashes not currently doing a good job at qc resistance as of a  survey an attacker with a powerful qc and nothing else besides a copy of the bitcoin block chain could steal over  of all bitcoins most of those would be the result of users reusing addresses a discouraged practice—but one that seems unlikely to go away soonadditionally discussion participants pointed out that anyone who shares their individual public keys or  extended public keys xpubs with third parties would also be at risk from a powerful qc if their public keys leaked this would likely include most bitcoins stored with a hardware wallet or in an ln payment channel in short it’s possible that even though we almost universally use  hashed public keys today nearly all bitcoins could be stolen by a powerful qc with access to public or thirdparty data that implies that the choice to use  nonhashed public keys with taproot doesn’t significantly change bitcoin’s current security modeladditionally discussion participants pointed out that anyone who shares their individual public keys or  extended public keys xpubs with third parties would also be at risk from a powerful qc if their public keys leaked this would likely include most bitcoins stored with a hardware wallet or in an ln payment channel in short it’s possible that even though we almost universally use  hashed public keys today nearly all bitcoins could be stolen by a powerful qc with access to public or thirdparty data that implies that the choice to use  nonhashed public keys with taproot doesn’t significantly change bitcoin’s current security modeltaproot improvement in postqc recovery at no onchain cost if bitcoiners learn that a powerful qc has manifested or soon will they can reject any taproot keypath spends—the type of spend where only a single signature is used however a user who prepares ahead when creating their taproot address can also spend bitcoins received to that address using a scriptpath spend in that case the taproot address commits to a hash of the tapscripts the user wants to use that hash commitment can be used as part of a scheme to transition to a new cryptographic algorithm that’s safe against qcs or—if such an algorithm is standardized for bitcoin before qcs become a threat—it can allow the owner of the bitcoins to immediately transition to the new scheme this does only work if individual users create backup tapscript spending paths if they don’t share any public keys including  xpubs involved in those backup paths and if we learn about a powerful qc before it does too much damage to bitcoinis the attack realistic one respondent thought a fast qc by the end of the decade was “on the wildly optimistic side of projected rate of progress” another noted it was a “fairly straightforward engineering challenge” to turn the design for a single slow qc into a farm of qcs that could work in parallel achieving results in a fraction of the time—making any protection from  hash indirection irrelevant a third respondent proposed constructing special bitcoin addresses that could only be spent from by someone making progress on fast qcs users could voluntarily donate bitcoins to the addresses to create an incentivized early warning systemwe could add a hashstyle address after taproot is activated if a significant number of users really do think the sudden appearance of a powerful qc is a threat we could use a followup soft fork to add an alternative  taproot address type that uses hashes however this has consequences that caused several respondents to oppose itit’ll create confusionit’ll use more block spaceit reduces the size of taproot’s anonymity set both directly and when protocols such as ring signature membership proofs or provisions are being usedbandwidthstorage costs versus cpu costs it’s possible to eliminate the extra  storage overhead from hash indirection by deriving the public key from a signature and the transaction data it signs a technique called key recovery again this was opposed key recovery requires a significant amount of cpu that would slow down nodes and also prevents the use of schnorr batch validation that can make historic block verification up to three times faster it also makes anonymous membership proofs and related techniques both harder to develop and much more cpu intensive there may also be a patent issueas of this writing it appears the mailing list discussion has concluded without any obvious loss of community support for taproot as researchers and businesses continue improving the state of the art in quantum computing we expect to see future discussions about how to best keep bitcoin secureweekly taproot activation meetings ten weekly meetings to discuss details related to activating taproot have been scheduled for each tuesday at  utc in the taprootactivation irc channel with the first meeting occurring yesterday march changes to services and client softwarein this monthly feature we highlight interesting updates to bitcoin wallets and servicesokcoin launches lightning deposits and withdrawals a blog post outlines okcoin’s lightning deposit and withdrawal support they also lowered their minimum depositwithdrawal limit from  to  btc as a result at this time  btc is okcoin’s limit when transacting using lnbitmex announces  support in a blog post bitmex detailed the launch plans for  deposit support bitmex had previously rolled out  withdrawal send supportspecter  released specter  includes support for bitcoin core descriptor wallets and coin control featuresbreez streams audio for lightning payments breez wallet has integrated an audio player which combined with keysend allows users to listen to podcasts while streaming payments to the publisher and sending oneoff tip paymentskey manager dux reserve announced thibaud maréchal announced dux reserve a beta open source desktop key manager supported on macos windows and linux and supporting ledger coldcard and trezor hardware walletscoldcard now using  coldcard’s version  among other features switches to using bitcoin core’s  library for its cryptographic operationsreleases and release candidatesnew releases and release candidates for popular bitcoin infrastructure projects please consider upgrading to new releases or helping to test release candidatesclightning  is a release candidate for the next major version of this ln node softwarenotable code and documentation changesnotable changes this week in bitcoin core clightning eclair lnd rustlightning  hardware wallet interface hwi rust bitcoin btcpay server bitcoin improvement proposals bips and lightning boltsbitcoin core  implements support for   format for  witness addresses  supersedes   as the address format for native segwit outputs of version  native segwit version  outputs  and  will continue to use  this pr would enable bitcoin core users to send payments to pay to taproot  addresses once taproot outputs  were defined on the network the change should not affect any mainnet systems but may cause address incompatibility issues in testing environments such as signet where taproot is already active using  addresses as previously proposed  support will also be backported to bitcoin core   and bitcoin core  updates the walletnotify configuration setting that calls a userspecified command each time a transaction is seen that affects a loaded wallet two new placeholders are added to the arguments that can be passed to the command b for the hash of a block containing the transaction and h for the height of the block both are set to defined values for unconfirmed transactionsclightning  deprecates the fundchannelcomplete rpc’s acceptance of txids requesting instead that a psbt be passed the psbt can be checked to ensure it contains the funding output eliminating a problem where a user who passes incorrect data can lose the ability to recover their fundsclightning  implements the funding transaction recovery procedure covered in last week’s newsletter users who mistakenly funded channels with a firstparty malleated transaction eg using rbf but haven’t used the channel yet can now supply their transaction output to the lightningclose command to negotiate recovery with a peer supporting the shutdownwrongfunding featurelnd  makes available a number of new configuration options for limiting how much network gossip information lnd processes this can help on systems with limited resources  implements an algorithm that can speed up signature verification by  it can also reduce by  the amount of time it takes to generate signatures while still using a constanttime algorithm that maximizes sidechannel resistance it additionally removes some of ’s dependencies on other libraries see newsletter  for more information about this optimizationbips  adds  specifying version  psbts as previously discussed on the mailing list see newsletter 