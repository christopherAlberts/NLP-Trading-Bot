this week’s newsletter covers using lightning network offers to address stuck payments taproot activation and morethe bitcoin optech newsletter provides readers with a toplevel summary of the most important technical news happening in bitcoin along with resources that help them learn more to help our readers stay uptodate with bitcoin were republishing the latest issue of this newsletter below remember to subscribe to receive this content straight to your inboxthis week’s newsletter describes progress on activating taproot summarizes an update to ln offers to partly address stuck payments relays a request for feedback on anchor outputs in lnd and announces the public launch of the sapio smart contract development toolkit also included are our regular sections with summaries of changes to popular clients and services new releases and release candidates and notable changes to popular bitcoin infrastructure softwarenewstaproot activation release candidate since our update on taproot activation in last week’s newsletter the bitcoin core project has merged a pull request implementing the speedy trial activation mechanism and a second pr containing the activation parameters these prs and a few others are currently part of the first release candidate rc for bitcoin core  testing and other quality assurance tasks are expected to continue for at least several days after the publication of this newsletter see the rc and merge summary sections below for more detailsusing ln offers to partly address stuck payments in some cases an attempt to pay an ln invoice can result in the payment becoming stuck for an extended period of time until the failure is resolved requesting a second invoice to make a second payment attempt can result in paying twicethis week rusty russell posted to the lightningdev mailing list a change to his proposed offers specification that allows the receiver of a payment to commit to a new invoice which supplants the previous invoice if the spender pays the second invoice there’s still a risk that they will pay twice but the receiver’s signature on the offer combined with ln’s inherent proof of payment will allow the spender to prove the receiver acted deceitfully if both payments were accepted when paying a receiver with an established reputation such as a popular business that may be enough to eliminate stuck payments as a major problemthe update to the offers specification also allows the receiver to indicate that they received the payment and the problem is with a downstream node in that case the funds for both the spender and the receiver are fully secure and the only consequence is that the spender will need to wait a while before they can reuse that particular one of their payment slots htlc slots this ability to communicate interactively is a clear advantage of offers over plain invoicesthis week rusty russell posted to the lightningdev mailing list a change to his proposed offers specification that allows the receiver of a payment to commit to a new invoice which supplants the previous invoice if the spender pays the second invoice there’s still a risk that they will pay twice but the receiver’s signature on the offer combined with ln’s inherent proof of payment will allow the spender to prove the receiver acted deceitfully if both payments were accepted when paying a receiver with an established reputation such as a popular business that may be enough to eliminate stuck payments as a major problem the update to the offers specification also allows the receiver to indicate that they received the payment and the problem is with a downstream node in that case the funds for both the spender and the receiver are fully secure and the only consequence is that the spender will need to wait a while before they can reuse that particular one of their payment slots htlc slots this ability to communicate interactively is a clear advantage of offers over plain invoices using anchor outputs by default in lnd olaoluwa osuntokun posted to the lnd engineering mailing list about his desire for the next major version of lnd to use anchor outputs by default anchor outputs will allow unconfirmed ln commitment transactions that close a channel to be cpfp fee bumped unfortunately there are some challenges with cpfp fee bumping in the ln modelnot always optional for regular onchain transactions many users can just wait longer for their transaction to confirm as an alternative to fee bumping for ln sometimes waiting isn’t an option—a fee bump will need to be submitted within a matter of hours or funds could be losttimelocked outputs for most regular onchain payments a user who wants to cpfp bump can pay for a fee bump using the funds stored in their output from the transaction they want to bump in the case of ln those funds aren’t available until the channel close has been fully settled onchain that means the user needs to use a separate utxo to pay the feesto address the above two concerns lnd is requiring users of anchor outputs to retain at least one confirmed utxo of reasonable value in their wallet any time a channel is open that ensures they can cpfp fee bump when necessary but it has certain consequences such as preventing spending the last of your onchain funds even to open a new channel while you still have at least one channel openosuntokun’s request is for wallets or services built on lnd to let the development team know if any of the above concerns or any other concerns related to anchor outputs will cause serious problems although the question is specific to lnd the answers may have implications for all ln nodesosuntokun’s request is for wallets or services built on lnd to let the development team know if any of the above concerns or any other concerns related to anchor outputs will cause serious problems although the question is specific to lnd the answers may have implications for all ln nodes sapio public launch jeremy rubin posted to the bitcoindev mailing list an announcement that he has made available the sapio smart contract development toolkit a rustbased library and associated tooling that can be used to create smart contracts expressible using bitcoin script the language was originally designed to make use of rubin’s proposed opchecktemplateverify opcode opctv but it can simulate the existence of that opcode and of other potential features for bitcoin such as taproot using a trusted signing oracle in addition to the sapio library the release also contains extensive documentation and an experimental frontendchanges to services and client softwarein this monthly feature we highlight interesting updates to bitcoin wallets and servicesspecter  released specter  includes additional rbf support bitcoin core setup from within the application hwi  support and an option to use mempoolspace as a block explorer and for fee estimationspecterdiy  hardware wallet firmware specterdiy released  which adds custom sighash flag support and full descriptor support including miniscriptbluewallet  adds message signing bluewallet  allows users to sign and verify messages using bitcoin addresses among other features and fixesazteco announces lightning support bitcoin voucher company azteco announced support for redeeming purchased bitcoins via lightning networkreleases and release candidatesnew releases and release candidates for popular bitcoin infrastructure projects please consider upgrading to new releases or helping to test release candidatesbitcoin core  is a release candidate for a version of bitcoin core that if activated will enforce the rules of the proposed taproot soft fork which uses schnorr signatures and allows use of tapscript these are respectively specified by bips   and  also included is the ability to pay  addresses specified by  although bitcoins spent to such addresses on mainnet will not be secure until activation of a soft fork using such addresses such as taproot the release additionally includes bug fixes and minor improvementsnotable code and documentation changesnotable changes this week in bitcoin core clightning eclair lnd rustlightning  hardware wallet interface hwi rust bitcoin btcpay server bitcoin improvement proposals bips and lightning boltsbitcoin core  adds the activation mechanism and  adds the activation parameters for the taproot softfork starting with the first difficulty adjustment after april  miners will be able to signal readiness for taproot activation on bit  if   of one difficulty period’s  blocks in the signaling window signal readiness the softfork activation locks in the signaling window ends with the first difficulty adjustment after august  if locked in taproot will be activated at block height  which is expected to be reached around november bitcoin core  updates the listbanned rpc with two additional fields banduration and timeremainingclightning  adds lnprototest ln protocol tests to the default targets for clightning’s continuous integration ci tests and also makes it easier for developers to run the tests from clightning’s usual build system the ln protocol tests make it easy for an implementation to test that they’re following the ln protocol specificationlnd  skips creating a change output in cases where the amount of change is so small that it’s worth less than the amount it would cost to spend itlnd  disables channel validation by default for lnd instances using the neutrino client which implements the compact block filters protocol this option assumes that channel advertisements received from a peer are correct saving the client from having to download old blocks necessary to verify those advertisements this has the downside that payment attempts made using falsely advertised channels will fail wasting time but not causing the loss of money—a reasonable tradeoff for anyone already choosing to use a lightweight client this new default behavior may be disabled by using the new configuration option neutrinovalidatechannelstruelnd  adds basic support for using lnd with a pruned full node allowing lnd to externally request from other bitcoin nodes a block that has been deleted by the local node lnd can then extract whatever information it needs from the block without going through the pruned node because the user’s own full node previously verified the block this doesn’t change the security modellnd  adds new channelcommitinterval and channelcommitbatchsize parameters that can be used to configure how long lnd will wait before sending a channel state update and the maximum number of changes it’ll send in one update the higher these values are the more efficient a busy lnd node will be although that efficiency comes at the cost of having a slightly higher latencyrustlightning  adds internal support for interoperating with electrumstyle blockchain data sourcesrustlightning  updates how it handles funding transactions previously the wallet was asked to create the funding transaction that opened a new channel and to give rust lightning only that transaction’s txid now rust lightning accepts the full funding transaction similar to a recent change to clightning see newsletter  this allows the ln software to check the funding transaction before it is broadcast and ensure it is correcthwi  adds support for signing arbitrary bitcoinstyle messages using the  hardware walletbtcpay server  adds support for receiving payjoin payments to the wallet even for addresses not associated with a btcpay invoicefind the original post hereplease subscribe to the bitcoin optech newsletter directly to receive this content straight to your inbox every month